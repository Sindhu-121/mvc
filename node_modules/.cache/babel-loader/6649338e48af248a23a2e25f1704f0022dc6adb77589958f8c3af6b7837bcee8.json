{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\EGATE_OTS_MAIN_PROJECT\\\\src\\\\components\\\\TestUpdate.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import moment from 'moment';\n\n// const TestUpdate = () => {\n//   const { testCreationTableId } = useParams();\n//   const [courses, setCourses] = useState([]);\n//   const [typeOfTests, setTypeOfTests] = useState([]);\n//   const [instructionsData, setInstructionsData] = useState([]);\n//   const [testData, setTestData] = useState({\n//     TestName: '',\n//     selectedCourse: '',\n//     selectedTypeOfTest: '',\n//     testStartDate: '',\n//     testEndDate: '',\n//     testStartTime: '',\n//     testEndTime: '',\n//     Duration: '',\n//     TotalQuestions: '',\n//     totalMarks: '',\n//     calculator: 'No',\n//     status: 'Inactive',\n//     sectionName: '',\n//     noOfQuestions: '',\n//     QuestionLimit: '',\n//     selectedInstruction:'',\n//   });\n\n//   const handleChange = (e) => {\n//     const { name, value, type } = e.target;\n//     const updatedValue = type === 'number' ? parseFloat(value) : value;\n\n//     setTestData((prevData) => ({\n//       ...prevData,\n//       [name]: updatedValue,\n//     }));\n//   };\n//   function formatTime(dateTimeString) {\n//     if (dateTimeString === 'Invalid Time') {\n//       return '00:00'; // or any other default time you prefer\n//     }\n\n//     const formattedTime = moment(dateTimeString, 'HH:mm:ss.SSSSSS').format('HH:mm:ss');\n//     return formattedTime !== 'Invalid date' ? formattedTime : 'Invalid Time';\n//   }\n\n//   // const formatDate = (dateString) => {\n//   //   if (!dateString) {\n//   //     return '';\n//   //   }\n//   //   const date = new Date(dateString);\n//   //   const year = date.getFullYear();\n//   //   const month = String(date.getMonth() + 1).padStart(2, '0');\n//   //   const day = String(date.getDate()).padStart(2, '0');\n\n//   //   return `${year}-${month}-${day}`;\n//   // };\n//   useEffect(() => {\n//   fetch('http://localhost:3081/instructions')\n//   .then((response) => response.json())\n//   .then((data) => setInstructionsData(data))\n//   .catch((error) => console.error('Error fetching courses:', error));\n//   }, []);\n\n//   useEffect(() => {\n//     // Fetch courses from the API\n//     fetch('http://localhost:3081/testcourses')\n//       .then((response) => response.json())\n//       .then((data) => setCourses(data))\n//       .catch((error) => console.error('Error fetching courses:', error));\n//   }, []);\n\n//   useEffect(() => {\n//     // Fetch type of tests from the API based on the selected course\n//     if (testData.selectedCourse) {\n//       fetch(`http://localhost:3081/course-typeoftests/${testData.selectedCourse}`)\n//         .then((response) => response.json())\n//         .then((data) => setTypeOfTests(data))\n//         .catch((error) => console.error('Error fetching type of tests:', error));\n//     }\n//   }, [testData.selectedCourse]);\n\n//   useEffect(() => {\n//     fetch(`http://localhost:3081/testupdate/${testCreationTableId}`)\n//       .then((response) => {\n//         console.log('Response Status:', response.status);\n//         return response.json();\n//       })\n//       .then((data) => {\n//         console.log('Fetched Data:', data);\n//         setTestData({\n//           ...data,\n//           selectedCourse: data.courseCreationId,\n//           selectedTypeOfTest: data.courseTypeOfTestId,\n//           sectionName: data.sectionName,\n//           noOfQuestions: data.noOfQuestions,\n//           QuestionLimit: data.QuestionLimit,\n//           selectedInstruction: data.instructionId,\n//         });\n//       })\n//       .catch((error) => console.error('Error fetching test data:', error));\n//   }, [testCreationTableId]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await fetch(`http://localhost:3081/test-update/${testCreationTableId}`, {\n//         method: 'PUT',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           TestName: testData.TestName,\n//           selectedCourse: testData.selectedCourse,\n//           selectedTypeOfTest: testData.selectedTypeOfTest,\n//           testStartDate: testData.testStartDate,\n//           testEndDate: testData.testEndDate,\n//           testStartTime: testData.testStartTime,\n//           testEndTime: testData.testEndTime,\n//           Duration: testData.Duration,\n//           TotalQuestions: testData.TotalQuestions,\n//           totalMarks: testData.totalMarks,\n//           calculator: testData.calculator,\n//           status: testData.status,\n//           sectionName: testData.sectionName,\n//           noOfQuestions: testData.noOfQuestions,\n//           QuestionLimit: testData.QuestionLimit,\n//           selectedInstruction:testData.selectedInstruction,\n\n//         }),\n//       });\n\n//       const data = await response.json();\n//       console.log(data);\n//     } catch (error) {\n//       console.error('Error sending request:', error);\n//     }\n//   };\n//   const handleSectionChange = (e, index) => {\n//     const { name, value, type } = e.target;\n//     const updatedValue = type === 'number' ? parseFloat(value) : value;\n\n//     setTestData((prevData) => {\n//       const updatedSections = [...prevData.selectedsections];\n//       updatedSections[index] = {\n//         ...updatedSections[index],\n//         [name]: updatedValue,\n//       };\n//       return {\n//         ...prevData,\n//         selectedsections: updatedSections,\n//       };\n//     });\n//   };\n//   return (\n//     <div>\n//       <h2>Test Update Form</h2>\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Test Name:\n//           <input type=\"text\" name=\"TestName\" value={testData.TestName} onChange={handleChange} />\n//         </label>\n//         <br />\n//         <label>\n//           Select Course:\n//           <select name=\"selectedCourse\" value={testData.selectedCourse} onChange={handleChange}>\n//             <option value=\"\">Select a Course</option>\n//             {courses.map((course) => (\n//               <option key={course.courseCreationId} value={course.courseCreationId}>\n//                 {course.courseName}\n//               </option>\n//             ))}\n//           </select>\n//         </label>\n//         <br />\n\n//         <label>\n//           Type of Tests:\n//           <select name=\"selectedTypeOfTest\" value={testData.selectedTypeOfTest} onChange={handleChange}>\n//             <option value=\"\">Select a Type of Test</option>\n//             {typeOfTests.map((typeOfTest) => (\n//               <option key={typeOfTest.TypeOfTestId} value={typeOfTest.TypeOfTestId}>\n//                 {typeOfTest.TypeOfTestName}\n//               </option>\n//             ))}\n//           </select>\n//         </label>\n//         <br />\n//         <label>\n//           Test Start Date:\n//           <input type=\"date\" name=\"testStartDate\" value={testData.testStartDate} onChange={handleChange} />\n//         </label>\n//         <br />\n\n//         <label>\n//           Test End Date:\n//           <input type=\"date\" name=\"testEndDate\" value={testData.testEndDate} onChange={handleChange} />\n//         </label>\n//         <br />\n\n//         <label>\n//           Start Time:\n//           <input type=\"time\" name=\"testStartTime\" value={formatTime(testData.testStartTime)} onChange={handleChange} />\n//         </label>\n//         <br />\n\n//         <label>\n//           End Time:\n//           <input type=\"time\" name=\"testEndTime\" value={formatTime(testData.testEndTime)} onChange={handleChange} />\n//         </label>\n//         <br />\n\n//         <label>\n//           Duration (in minutes):\n//           <input type=\"number\" name=\"Duration\" value={testData.Duration} onChange={handleChange} />\n//         </label>\n//         <br />\n\n//         <label>\n//           Total Questions:\n//           <input type=\"number\" name=\"TotalQuestions\" value={testData.TotalQuestions} onChange={handleChange} />\n//         </label>\n//         <br />\n\n//         <label>\n//           Total Marks:\n//           <input type=\"number\" name=\"totalMarks\" value={testData.totalMarks} onChange={handleChange} />\n//         </label>\n//         <br />\n//         <label>\n//           Section Name:\n//           <input type=\"text\" name=\"sectionName\" value={testData.sectionName} onChange={handleChange} />\n//         </label>\n//         <br />\n//         <label>\n//           Number of Questions:\n//           <input type=\"number\" name=\"noOfQuestions\" value={testData.noOfQuestions} onChange={handleChange} />\n//         </label>\n//         <br />\n//         <label>\n//           Question Limit:\n//           <input type=\"number\" name=\"QuestionLimit\" value={testData.QuestionLimit} onChange={handleChange} />\n//         </label>\n\n//         <label>\n//   Instructions:\n//   <select\n//     value={testData.selectedInstruction}\n//     name=\"selectedInstruction\"\n//     onChange={handleChange}\n//   >\n//     <option value=\"\">Select an instruction</option>\n//     {instructionsData.map((instruction) => (\n//       <option key={instruction.instructionId} value={instruction.instructionId}>\n//         {instruction.instructionHeading}\n//       </option>\n//     ))}\n//   </select>\n// </label>\n\n//         <label>\n//           Calculator:\n//           <select name=\"calculator\" value={testData.calculator} onChange={handleChange}>\n//             <option value=\"Yes\">Yes</option>\n//             <option value=\"No\">No</option>\n//           </select>\n//         </label>\n//         <br />\n\n//         <label>\n//           Status:\n//           <select name=\"status\" value={testData.status} onChange={handleChange}>\n//             <option value=\"Active\">Active</option>\n//             <option value=\"Inactive\">Inactive</option>\n//           </select>\n//         </label>\n//         <br />\n\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default TestUpdate;\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestUpdate = () => {\n  _s();\n  const {\n    testCreationTableId\n  } = useParams();\n  const [courses, setCourses] = useState([]);\n  const [typeOfTests, setTypeOfTests] = useState([]);\n  const [instructionsData, setInstructionsData] = useState([]);\n  const [subjects, setSubjects] = useState([]);\n  // const [selectedSubjects, setSelectedSubjects] = useState([]);\n\n  const [testData, setTestData] = useState({\n    TestName: '',\n    selectedCourse: '',\n    selectedTypeOfTest: '',\n    testStartDate: '',\n    testEndDate: '',\n    testStartTime: '',\n    testEndTime: '',\n    Duration: '',\n    TotalQuestions: '',\n    totalMarks: '',\n    calculator: 'No',\n    status: 'Inactive',\n    sectionName: '',\n    noOfQuestions: '',\n    QuestionLimit: '',\n    selectedInstruction: '',\n    selectedSubjects: ''\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value,\n      type\n    } = e.target;\n    const updatedValue = type === 'number' ? parseFloat(value) : value;\n    setTestData(prevData => ({\n      ...prevData,\n      [name]: updatedValue\n    }));\n  };\n  function formatTime(dateTimeString) {\n    if (dateTimeString === 'Invalid Time') {\n      return '00:00'; // or any other default time you prefer\n    }\n\n    const formattedTime = moment(dateTimeString, 'HH:mm:ss.SSSSSS').format('HH:mm:ss');\n    return formattedTime !== 'Invalid date' ? formattedTime : 'Invalid Time';\n  }\n\n  // const formatDate = (dateString) => {\n  //   if (!dateString) {\n  //     return '';\n  //   }\n  //   const date = new Date(dateString);\n  //   const year = date.getFullYear();\n  //   const month = String(date.getMonth() + 1).padStart(2, '0');\n  //   const day = String(date.getDate()).padStart(2, '0');\n\n  //   return `${year}-${month}-${day}`;\n  // };\n\n  useEffect(() => {\n    fetch('http://localhost:3081/instructions').then(response => response.json()).then(data => setInstructionsData(data)).catch(error => console.error('Error fetching courses:', error));\n  }, []);\n  useEffect(() => {\n    // Fetch courses from the API\n    fetch('http://localhost:3081/testcourses').then(response => response.json()).then(data => setCourses(data)).catch(error => console.error('Error fetching courses:', error));\n  }, []);\n  useEffect(() => {\n    // Fetch type of tests from the API based on the selected course\n    if (testData.selectedCourse) {\n      fetch(`http://localhost:3081/course-typeoftests/${testData.selectedCourse}`).then(response => response.json()).then(data => setTypeOfTests(data)).catch(error => console.error('Error fetching type of tests:', error));\n    }\n  }, [testData.selectedCourse]);\n  useEffect(() => {\n    // Fetch subjects based on the selected course\n    if (testData.selectedCourse) {\n      console.log('Fetching subjects...');\n      fetch(`http://localhost:3081/course-subjects/${testData.selectedCourse}`).then(response => response.json()).then(data => setSubjects(data)).catch(error => console.error('Error fetching subjects:', error));\n    }\n  }, [testData.selectedCourse]);\n  useEffect(() => {\n    fetch(`http://localhost:3081/testupdate/${testCreationTableId}`).then(response => {\n      console.log('Response Status:', response.status);\n      return response.json();\n    }).then(data => {\n      console.log('Fetched Data:', data);\n      setTestData({\n        ...data,\n        selectedCourse: data.courseCreationId,\n        selectedTypeOfTest: data.courseTypeOfTestId,\n        setSubjects: data.courseSubjectsId,\n        sectionName: data.sectionName,\n        noOfQuestions: data.noOfQuestions,\n        QuestionLimit: data.QuestionLimit,\n        selectedInstruction: data.instructionId\n      });\n    }).catch(error => console.error('Error fetching test data:', error));\n  }, [testCreationTableId]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch(`http://localhost:3081/test-update/${testCreationTableId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          TestName: testData.TestName,\n          selectedCourse: testData.selectedCourse,\n          selectedTypeOfTest: testData.selectedTypeOfTest,\n          testStartDate: testData.testStartDate,\n          testEndDate: testData.testEndDate,\n          testStartTime: testData.testStartTime,\n          testEndTime: testData.testEndTime,\n          Duration: testData.Duration,\n          TotalQuestions: testData.TotalQuestions,\n          totalMarks: testData.totalMarks,\n          calculator: testData.calculator,\n          status: testData.status,\n          sectionName: testData.sectionName,\n          noOfQuestions: testData.noOfQuestions,\n          QuestionLimit: testData.QuestionLimit,\n          selectedInstruction: testData.selectedInstruction,\n          selectedSubjects: testData.selectedSubjects\n        })\n      });\n      const data = await response.json();\n      console.log(data);\n    } catch (error) {\n      console.error('Error sending request:', error);\n    }\n  };\n  const handleSectionChange = (e, index) => {\n    const {\n      name,\n      value,\n      type\n    } = e.target;\n    const updatedValue = type === 'number' ? parseFloat(value) : value;\n    setTestData(prevData => {\n      const updatedSections = [...prevData.selectedsections];\n      updatedSections[index] = {\n        ...updatedSections[index],\n        [name]: updatedValue\n      };\n      return {\n        ...prevData,\n        selectedsections: updatedSections\n      };\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Test Update Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Test Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"TestName\",\n          value: testData.TestName,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Select Course:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"selectedCourse\",\n          value: testData.selectedCourse,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a Course\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 13\n          }, this), courses.map(course => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: course.courseCreationId,\n            children: course.courseName\n          }, course.courseCreationId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Type of Tests:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"selectedTypeOfTest\",\n          value: testData.selectedTypeOfTest,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a Type of Test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 13\n          }, this), typeOfTests.map(typeOfTest => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: typeOfTest.TypeOfTestId,\n            children: typeOfTest.TypeOfTestName\n          }, typeOfTest.TypeOfTestId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Test Start Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          name: \"testStartDate\",\n          value: testData.testStartDate,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Test End Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          name: \"testEndDate\",\n          value: testData.testEndDate,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Start Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          name: \"testStartTime\",\n          value: formatTime(testData.testStartTime),\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"End Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          name: \"testEndTime\",\n          value: formatTime(testData.testEndTime),\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Duration (in minutes):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"Duration\",\n          value: testData.Duration,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Total Questions:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"TotalQuestions\",\n          value: testData.TotalQuestions,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Total Marks:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"totalMarks\",\n          value: testData.totalMarks,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Select Subjects:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"selectedSubjects\",\n          value: testData.selectedSubjects,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a Subject\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 9\n          }, this), subjects.map(subject => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: subject.subjectId,\n            children: subject.subjectName\n          }, subject.subjectId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 561,\n            columnNumber: 7\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Section Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"sectionName\",\n          value: testData.sectionName,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Number of Questions:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"noOfQuestions\",\n          value: testData.noOfQuestions,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Question Limit:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"QuestionLimit\",\n          value: testData.QuestionLimit,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Instructions:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: testData.selectedInstruction,\n          name: \"selectedInstruction\",\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select an instruction\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 5\n          }, this), instructionsData.map(instruction => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: instruction.instructionId,\n            children: instruction.instructionHeading\n          }, instruction.instructionId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 7\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Calculator:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"calculator\",\n          value: testData.calculator,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Yes\",\n            children: \"Yes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 603,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"No\",\n            children: \"No\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Status:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"status\",\n          value: testData.status,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Active\",\n            children: \"Active\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Inactive\",\n            children: \"Inactive\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 618,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 476,\n    columnNumber: 5\n  }, this);\n};\n_s(TestUpdate, \"pjWMA+XIV3W192WP8ELai4mARyE=\", false, function () {\n  return [useParams];\n});\n_c = TestUpdate;\nexport default TestUpdate;\nvar _c;\n$RefreshReg$(_c, \"TestUpdate\");","map":{"version":3,"names":["React","useState","useEffect","useParams","moment","jsxDEV","_jsxDEV","TestUpdate","_s","testCreationTableId","courses","setCourses","typeOfTests","setTypeOfTests","instructionsData","setInstructionsData","subjects","setSubjects","testData","setTestData","TestName","selectedCourse","selectedTypeOfTest","testStartDate","testEndDate","testStartTime","testEndTime","Duration","TotalQuestions","totalMarks","calculator","status","sectionName","noOfQuestions","QuestionLimit","selectedInstruction","selectedSubjects","handleChange","e","name","value","type","target","updatedValue","parseFloat","prevData","formatTime","dateTimeString","formattedTime","format","fetch","then","response","json","data","catch","error","console","log","courseCreationId","courseTypeOfTestId","courseSubjectsId","instructionId","handleSubmit","preventDefault","method","headers","body","JSON","stringify","handleSectionChange","index","updatedSections","selectedsections","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","map","course","courseName","typeOfTest","TypeOfTestId","TypeOfTestName","subject","subjectId","subjectName","instruction","instructionHeading","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/EGATE_OTS_MAIN_PROJECT/src/components/TestUpdate.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import moment from 'moment';\r\n\r\n// const TestUpdate = () => {\r\n//   const { testCreationTableId } = useParams();\r\n//   const [courses, setCourses] = useState([]);\r\n//   const [typeOfTests, setTypeOfTests] = useState([]);\r\n//   const [instructionsData, setInstructionsData] = useState([]);\r\n//   const [testData, setTestData] = useState({\r\n//     TestName: '',\r\n//     selectedCourse: '',\r\n//     selectedTypeOfTest: '',\r\n//     testStartDate: '',\r\n//     testEndDate: '',\r\n//     testStartTime: '',\r\n//     testEndTime: '',\r\n//     Duration: '',\r\n//     TotalQuestions: '',\r\n//     totalMarks: '',\r\n//     calculator: 'No',\r\n//     status: 'Inactive',\r\n//     sectionName: '',\r\n//     noOfQuestions: '',\r\n//     QuestionLimit: '',\r\n//     selectedInstruction:'',\r\n//   });\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value, type } = e.target;\r\n//     const updatedValue = type === 'number' ? parseFloat(value) : value;\r\n\r\n//     setTestData((prevData) => ({\r\n//       ...prevData,\r\n//       [name]: updatedValue,\r\n//     }));\r\n//   };\r\n//   function formatTime(dateTimeString) {\r\n//     if (dateTimeString === 'Invalid Time') {\r\n//       return '00:00'; // or any other default time you prefer\r\n//     }\r\n\r\n//     const formattedTime = moment(dateTimeString, 'HH:mm:ss.SSSSSS').format('HH:mm:ss');\r\n//     return formattedTime !== 'Invalid date' ? formattedTime : 'Invalid Time';\r\n//   }\r\n\r\n//   // const formatDate = (dateString) => {\r\n//   //   if (!dateString) {\r\n//   //     return '';\r\n//   //   }\r\n//   //   const date = new Date(dateString);\r\n//   //   const year = date.getFullYear();\r\n//   //   const month = String(date.getMonth() + 1).padStart(2, '0');\r\n//   //   const day = String(date.getDate()).padStart(2, '0');\r\n\r\n//   //   return `${year}-${month}-${day}`;\r\n//   // };\r\n//   useEffect(() => {\r\n//   fetch('http://localhost:3081/instructions')\r\n//   .then((response) => response.json())\r\n//   .then((data) => setInstructionsData(data))\r\n//   .catch((error) => console.error('Error fetching courses:', error));\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch courses from the API\r\n//     fetch('http://localhost:3081/testcourses')\r\n//       .then((response) => response.json())\r\n//       .then((data) => setCourses(data))\r\n//       .catch((error) => console.error('Error fetching courses:', error));\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch type of tests from the API based on the selected course\r\n//     if (testData.selectedCourse) {\r\n//       fetch(`http://localhost:3081/course-typeoftests/${testData.selectedCourse}`)\r\n//         .then((response) => response.json())\r\n//         .then((data) => setTypeOfTests(data))\r\n//         .catch((error) => console.error('Error fetching type of tests:', error));\r\n//     }\r\n//   }, [testData.selectedCourse]);\r\n\r\n\r\n//   useEffect(() => {\r\n//     fetch(`http://localhost:3081/testupdate/${testCreationTableId}`)\r\n//       .then((response) => {\r\n//         console.log('Response Status:', response.status);\r\n//         return response.json();\r\n//       })\r\n//       .then((data) => {\r\n//         console.log('Fetched Data:', data);\r\n//         setTestData({\r\n//           ...data,\r\n//           selectedCourse: data.courseCreationId,\r\n//           selectedTypeOfTest: data.courseTypeOfTestId,\r\n//           sectionName: data.sectionName,\r\n//           noOfQuestions: data.noOfQuestions,\r\n//           QuestionLimit: data.QuestionLimit,\r\n//           selectedInstruction: data.instructionId,\r\n//         });\r\n//       })\r\n//       .catch((error) => console.error('Error fetching test data:', error));\r\n//   }, [testCreationTableId]);\r\n  \r\n\r\n\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     try {\r\n//       const response = await fetch(`http://localhost:3081/test-update/${testCreationTableId}`, {\r\n//         method: 'PUT',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify({\r\n//           TestName: testData.TestName,\r\n//           selectedCourse: testData.selectedCourse,\r\n//           selectedTypeOfTest: testData.selectedTypeOfTest,\r\n//           testStartDate: testData.testStartDate,\r\n//           testEndDate: testData.testEndDate,\r\n//           testStartTime: testData.testStartTime,\r\n//           testEndTime: testData.testEndTime,\r\n//           Duration: testData.Duration,\r\n//           TotalQuestions: testData.TotalQuestions,\r\n//           totalMarks: testData.totalMarks,\r\n//           calculator: testData.calculator,\r\n//           status: testData.status,\r\n//           sectionName: testData.sectionName,\r\n//           noOfQuestions: testData.noOfQuestions,\r\n//           QuestionLimit: testData.QuestionLimit,\r\n//           selectedInstruction:testData.selectedInstruction,\r\n\r\n//         }),\r\n//       });\r\n   \r\n//       const data = await response.json();\r\n//       console.log(data);\r\n//     } catch (error) {\r\n//       console.error('Error sending request:', error);\r\n//     }\r\n//   };\r\n//   const handleSectionChange = (e, index) => {\r\n//     const { name, value, type } = e.target;\r\n//     const updatedValue = type === 'number' ? parseFloat(value) : value;\r\n  \r\n//     setTestData((prevData) => {\r\n//       const updatedSections = [...prevData.selectedsections];\r\n//       updatedSections[index] = {\r\n//         ...updatedSections[index],\r\n//         [name]: updatedValue,\r\n//       };\r\n//       return {\r\n//         ...prevData,\r\n//         selectedsections: updatedSections,\r\n//       };\r\n//     });\r\n//   };\r\n//   return (\r\n//     <div>\r\n//       <h2>Test Update Form</h2>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <label>\r\n//           Test Name:\r\n//           <input type=\"text\" name=\"TestName\" value={testData.TestName} onChange={handleChange} />\r\n//         </label>\r\n//         <br />\r\n//         <label>\r\n//           Select Course:\r\n//           <select name=\"selectedCourse\" value={testData.selectedCourse} onChange={handleChange}>\r\n//             <option value=\"\">Select a Course</option>\r\n//             {courses.map((course) => (\r\n//               <option key={course.courseCreationId} value={course.courseCreationId}>\r\n//                 {course.courseName}\r\n//               </option>\r\n//             ))}\r\n//           </select>\r\n//         </label>\r\n//         <br />\r\n\r\n//         <label>\r\n//           Type of Tests:\r\n//           <select name=\"selectedTypeOfTest\" value={testData.selectedTypeOfTest} onChange={handleChange}>\r\n//             <option value=\"\">Select a Type of Test</option>\r\n//             {typeOfTests.map((typeOfTest) => (\r\n//               <option key={typeOfTest.TypeOfTestId} value={typeOfTest.TypeOfTestId}>\r\n//                 {typeOfTest.TypeOfTestName}\r\n//               </option>\r\n//             ))}\r\n//           </select>\r\n//         </label>\r\n//         <br />\r\n//         <label>\r\n//           Test Start Date:\r\n//           <input type=\"date\" name=\"testStartDate\" value={testData.testStartDate} onChange={handleChange} />\r\n//         </label>\r\n//         <br />\r\n\r\n//         <label>\r\n//           Test End Date:\r\n//           <input type=\"date\" name=\"testEndDate\" value={testData.testEndDate} onChange={handleChange} />\r\n//         </label>\r\n//         <br />\r\n\r\n//         <label>\r\n//           Start Time:\r\n//           <input type=\"time\" name=\"testStartTime\" value={formatTime(testData.testStartTime)} onChange={handleChange} />\r\n//         </label>\r\n//         <br />\r\n\r\n//         <label>\r\n//           End Time:\r\n//           <input type=\"time\" name=\"testEndTime\" value={formatTime(testData.testEndTime)} onChange={handleChange} />\r\n//         </label>\r\n//         <br />\r\n\r\n//         <label>\r\n//           Duration (in minutes):\r\n//           <input type=\"number\" name=\"Duration\" value={testData.Duration} onChange={handleChange} />\r\n//         </label>\r\n//         <br />\r\n\r\n//         <label>\r\n//           Total Questions:\r\n//           <input type=\"number\" name=\"TotalQuestions\" value={testData.TotalQuestions} onChange={handleChange} />\r\n//         </label>\r\n//         <br />\r\n\r\n//         <label>\r\n//           Total Marks:\r\n//           <input type=\"number\" name=\"totalMarks\" value={testData.totalMarks} onChange={handleChange} />\r\n//         </label>\r\n//         <br />\r\n//         <label>\r\n//           Section Name:\r\n//           <input type=\"text\" name=\"sectionName\" value={testData.sectionName} onChange={handleChange} />\r\n//         </label>\r\n//         <br />\r\n//         <label>\r\n//           Number of Questions:\r\n//           <input type=\"number\" name=\"noOfQuestions\" value={testData.noOfQuestions} onChange={handleChange} />\r\n//         </label>\r\n//         <br />\r\n//         <label>\r\n//           Question Limit:\r\n//           <input type=\"number\" name=\"QuestionLimit\" value={testData.QuestionLimit} onChange={handleChange} />\r\n//         </label>\r\n\r\n//         <label>\r\n//   Instructions:\r\n//   <select\r\n//     value={testData.selectedInstruction}\r\n//     name=\"selectedInstruction\"\r\n//     onChange={handleChange}\r\n//   >\r\n//     <option value=\"\">Select an instruction</option>\r\n//     {instructionsData.map((instruction) => (\r\n//       <option key={instruction.instructionId} value={instruction.instructionId}>\r\n//         {instruction.instructionHeading}\r\n//       </option>\r\n//     ))}\r\n//   </select>\r\n// </label>\r\n\r\n\r\n//         <label>\r\n//           Calculator:\r\n//           <select name=\"calculator\" value={testData.calculator} onChange={handleChange}>\r\n//             <option value=\"Yes\">Yes</option>\r\n//             <option value=\"No\">No</option>\r\n//           </select>\r\n//         </label>\r\n//         <br />\r\n\r\n//         <label>\r\n//           Status:\r\n//           <select name=\"status\" value={testData.status} onChange={handleChange}>\r\n//             <option value=\"Active\">Active</option>\r\n//             <option value=\"Inactive\">Inactive</option>\r\n//           </select>\r\n//         </label>\r\n//         <br />\r\n\r\n//         <button type=\"submit\">Submit</button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TestUpdate;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport moment from 'moment';\r\n \r\nconst TestUpdate = () => {\r\n  const { testCreationTableId } = useParams();\r\n  const [courses, setCourses] = useState([]);\r\n  const [typeOfTests, setTypeOfTests] = useState([]);\r\n  const [instructionsData, setInstructionsData] = useState([]);\r\n  const [subjects, setSubjects] = useState([]);\r\n// const [selectedSubjects, setSelectedSubjects] = useState([]);\r\n \r\n  const [testData, setTestData] = useState({\r\n    TestName: '',\r\n    selectedCourse: '',\r\n    selectedTypeOfTest: '',\r\n    testStartDate: '',\r\n    testEndDate: '',\r\n    testStartTime: '',\r\n    testEndTime: '',\r\n    Duration: '',\r\n    TotalQuestions: '',\r\n    totalMarks: '',\r\n    calculator: 'No',\r\n    status: 'Inactive',\r\n    sectionName: '',\r\n    noOfQuestions: '',\r\n    QuestionLimit: '',\r\n    selectedInstruction:'',\r\n    selectedSubjects:'',\r\n  });\r\n \r\n  const handleChange = (e) => {\r\n    const { name, value, type } = e.target;\r\n    const updatedValue = type === 'number' ? parseFloat(value) : value;\r\n \r\n    setTestData((prevData) => ({\r\n      ...prevData,\r\n      [name]: updatedValue,\r\n    }));\r\n  };\r\n  function formatTime(dateTimeString) {\r\n    if (dateTimeString === 'Invalid Time') {\r\n      return '00:00'; // or any other default time you prefer\r\n    }\r\n \r\n    const formattedTime = moment(dateTimeString, 'HH:mm:ss.SSSSSS').format('HH:mm:ss');\r\n    return formattedTime !== 'Invalid date' ? formattedTime : 'Invalid Time';\r\n  }\r\n \r\n  // const formatDate = (dateString) => {\r\n  //   if (!dateString) {\r\n  //     return '';\r\n  //   }\r\n  //   const date = new Date(dateString);\r\n  //   const year = date.getFullYear();\r\n  //   const month = String(date.getMonth() + 1).padStart(2, '0');\r\n  //   const day = String(date.getDate()).padStart(2, '0');\r\n \r\n  //   return `${year}-${month}-${day}`;\r\n  // };\r\n \r\n \r\n  useEffect(() => {\r\n  fetch('http://localhost:3081/instructions')\r\n  .then((response) => response.json())\r\n  .then((data) => setInstructionsData(data))\r\n  .catch((error) => console.error('Error fetching courses:', error));\r\n  }, []);\r\n \r\n  useEffect(() => {\r\n    // Fetch courses from the API\r\n    fetch('http://localhost:3081/testcourses')\r\n      .then((response) => response.json())\r\n      .then((data) => setCourses(data))\r\n      .catch((error) => console.error('Error fetching courses:', error));\r\n  }, []);\r\n \r\n  useEffect(() => {\r\n    // Fetch type of tests from the API based on the selected course\r\n    if (testData.selectedCourse) {\r\n      fetch(`http://localhost:3081/course-typeoftests/${testData.selectedCourse}`)\r\n        .then((response) => response.json())\r\n        .then((data) => setTypeOfTests(data))\r\n        .catch((error) => console.error('Error fetching type of tests:', error));\r\n    }\r\n  }, [testData.selectedCourse]);\r\n \r\n  useEffect(() => {\r\n    // Fetch subjects based on the selected course\r\n    if (testData.selectedCourse) {\r\n      console.log('Fetching subjects...');\r\n      fetch(`http://localhost:3081/course-subjects/${testData.selectedCourse}`)\r\n        .then((response) => response.json())\r\n        .then((data) =>  setSubjects(data))\r\n        .catch((error) => console.error('Error fetching subjects:', error));\r\n    }\r\n  }, [testData.selectedCourse]);\r\n \r\n \r\n  useEffect(() => {\r\n    fetch(`http://localhost:3081/testupdate/${testCreationTableId}`)\r\n      .then((response) => {\r\n        console.log('Response Status:', response.status);\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        console.log('Fetched Data:', data);\r\n        setTestData({\r\n          ...data,\r\n          selectedCourse: data.courseCreationId,\r\n          selectedTypeOfTest: data.courseTypeOfTestId,\r\n          setSubjects:data.courseSubjectsId ,\r\n          sectionName: data.sectionName,\r\n          noOfQuestions: data.noOfQuestions,\r\n          QuestionLimit: data.QuestionLimit,\r\n          selectedInstruction: data.instructionId,\r\n        });\r\n      })\r\n      .catch((error) => console.error('Error fetching test data:', error));\r\n  }, [testCreationTableId]);\r\n \r\n \r\n \r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n \r\n    try {\r\n      const response = await fetch(`http://localhost:3081/test-update/${testCreationTableId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          TestName: testData.TestName,\r\n          selectedCourse: testData.selectedCourse,\r\n          selectedTypeOfTest: testData.selectedTypeOfTest,\r\n          testStartDate: testData.testStartDate,\r\n          testEndDate: testData.testEndDate,\r\n          testStartTime: testData.testStartTime,\r\n          testEndTime: testData.testEndTime,\r\n          Duration: testData.Duration,\r\n          TotalQuestions: testData.TotalQuestions,\r\n          totalMarks: testData.totalMarks,\r\n          calculator: testData.calculator,\r\n          status: testData.status,\r\n          sectionName: testData.sectionName,\r\n          noOfQuestions: testData.noOfQuestions,\r\n          QuestionLimit: testData.QuestionLimit,\r\n          selectedInstruction:testData.selectedInstruction,\r\n          selectedSubjects: testData.selectedSubjects,\r\n        }),\r\n      });\r\n   \r\n      const data = await response.json();\r\n      console.log(data);\r\n    } catch (error) {\r\n      console.error('Error sending request:', error);\r\n    }\r\n  };\r\n  const handleSectionChange = (e, index) => {\r\n    const { name, value, type } = e.target;\r\n    const updatedValue = type === 'number' ? parseFloat(value) : value;\r\n \r\n    setTestData((prevData) => {\r\n      const updatedSections = [...prevData.selectedsections];\r\n      updatedSections[index] = {\r\n        ...updatedSections[index],\r\n        [name]: updatedValue,\r\n      };\r\n      return {\r\n        ...prevData,\r\n        selectedsections: updatedSections,\r\n      };\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <h2>Test Update Form</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Test Name:\r\n          <input type=\"text\" name=\"TestName\" value={testData.TestName} onChange={handleChange} />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Select Course:\r\n          <select name=\"selectedCourse\" value={testData.selectedCourse} onChange={handleChange}>\r\n            <option value=\"\">Select a Course</option>\r\n            {courses.map((course) => (\r\n              <option key={course.courseCreationId} value={course.courseCreationId}>\r\n                {course.courseName}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n        <br />\r\n \r\n        <label>\r\n          Type of Tests:\r\n          <select name=\"selectedTypeOfTest\" value={testData.selectedTypeOfTest} onChange={handleChange}>\r\n            <option value=\"\">Select a Type of Test</option>\r\n            {typeOfTests.map((typeOfTest) => (\r\n              <option key={typeOfTest.TypeOfTestId} value={typeOfTest.TypeOfTestId}>\r\n                {typeOfTest.TypeOfTestName}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n        <br />\r\n \r\n \r\n \r\n        <label>\r\n          Test Start Date:\r\n          <input type=\"date\" name=\"testStartDate\" value={testData.testStartDate} onChange={handleChange} />\r\n        </label>\r\n        <br />\r\n \r\n        <label>\r\n          Test End Date:\r\n          <input type=\"date\" name=\"testEndDate\" value={testData.testEndDate} onChange={handleChange} />\r\n        </label>\r\n        <br />\r\n \r\n        <label>\r\n          Start Time:\r\n          <input type=\"time\" name=\"testStartTime\" value={formatTime(testData.testStartTime)} onChange={handleChange} />\r\n        </label>\r\n        <br />\r\n \r\n        <label>\r\n          End Time:\r\n          <input type=\"time\" name=\"testEndTime\" value={formatTime(testData.testEndTime)} onChange={handleChange} />\r\n        </label>\r\n        <br />\r\n \r\n        <label>\r\n          Duration (in minutes):\r\n          <input type=\"number\" name=\"Duration\" value={testData.Duration} onChange={handleChange} />\r\n        </label>\r\n        <br />\r\n \r\n        <label>\r\n          Total Questions:\r\n          <input type=\"number\" name=\"TotalQuestions\" value={testData.TotalQuestions} onChange={handleChange} />\r\n        </label>\r\n        <br />\r\n \r\n        <label>\r\n          Total Marks:\r\n          <input type=\"number\" name=\"totalMarks\" value={testData.totalMarks} onChange={handleChange} />\r\n        </label>\r\n        <br />\r\n        <label>\r\n  Select Subjects:\r\n  <select\r\n    name=\"selectedSubjects\"\r\n    value={testData.selectedSubjects}\r\n    onChange={handleChange}>\r\n        <option value=\"\">Select a Subject</option>\r\n    {subjects.map((subject) => (\r\n      <option key={subject.subjectId} value={subject.subjectId}>\r\n        {subject.subjectName}\r\n      </option>\r\n    ))}\r\n  </select>\r\n</label>\r\n \r\n        <label>\r\n          Section Name:\r\n          <input type=\"text\" name=\"sectionName\" value={testData.sectionName} onChange={handleChange} />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Number of Questions:\r\n          <input type=\"number\" name=\"noOfQuestions\" value={testData.noOfQuestions} onChange={handleChange} />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Question Limit:\r\n          <input type=\"number\" name=\"QuestionLimit\" value={testData.QuestionLimit} onChange={handleChange} />\r\n        </label>\r\n \r\n        <label>\r\n  Instructions:\r\n  <select\r\n    value={testData.selectedInstruction}\r\n    name=\"selectedInstruction\"\r\n    onChange={handleChange}\r\n  >\r\n    <option value=\"\">Select an instruction</option>\r\n    {instructionsData.map((instruction) => (\r\n      <option key={instruction.instructionId} value={instruction.instructionId}>\r\n        {instruction.instructionHeading}\r\n      </option>\r\n    ))}\r\n  </select>\r\n</label>\r\n \r\n \r\n        <label>\r\n          Calculator:\r\n          <select name=\"calculator\" value={testData.calculator} onChange={handleChange}>\r\n            <option value=\"Yes\">Yes</option>\r\n            <option value=\"No\">No</option>\r\n          </select>\r\n        </label>\r\n        <br />\r\n \r\n        <label>\r\n          Status:\r\n          <select name=\"status\" value={testData.status} onChange={handleChange}>\r\n            <option value=\"Active\">Active</option>\r\n            <option value=\"Inactive\">Inactive</option>\r\n          </select>\r\n        </label>\r\n        <br />\r\n \r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n \r\nexport default TestUpdate;"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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"},"metadata":{},"sourceType":"module","externalDependencies":[]}